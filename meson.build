project('scc', 'c',
	version: '3.14',
	license: 'GPL-2',
	default_options : ['c_std=gnu11'],
)

CONFIG_BACKEND = 'config_json'
tools_library_deps = []
parser_lib_deps = []
C_FILES = '*.c'

libexecinfo = []

if host_machine.system() == 'windows'
	add_global_arguments('-D_POSIX', '-DNO_X11', '-mno-ms-bitfields', language: 'c')
	add_global_arguments('-DNO_TRACEBACKS', language: 'c')
	# add_global_arguments('-DUSE_LIBUSB', language: 'c') # Disabled; not needed for now
	parser_lib_deps += [ meson.get_compiler('c').find_library('regex') ]
	CONFIG_BACKEND = 'config_win32'
	C_FILES = '\\*.c'
elif get_option('android').enabled()
	add_global_arguments('-DANDROID', language: 'c')
	add_global_arguments('-DNO_TRACEBACKS', language: 'c')
elif host_machine.system() == 'linux'
	add_global_arguments('-DUSE_LIBUSB', language: 'c')
	tools_library_deps = [ meson.get_compiler('c').find_library('dl') ]
elif host_machine.system() == 'openbsd' or host_machine.system() == 'netbsd'
	add_global_link_arguments('-lc', language: 'c')
	add_global_arguments('-D__BSD__', language: 'c')
endif
# Check for backtrace and libexecinfo
if host_machine.system() == 'linux' or host_machine.system() == 'openbsd' or host_machine.system() == 'netbsd'
	compiler = meson.get_compiler('c')
	if compiler.has_header('execinfo.h')
		if not compiler.has_function('backtrace', prefix : '#include <execinfo.h>')
			libexecinfo += [ compiler.find_library('execinfo') ]
		endif
	else
		add_global_arguments('-DNO_TRACEBACKS', language: 'c')
	endif
endif
if get_option('menu-generators').enabled()
	add_global_arguments('-DMENU_GENERATORS_ENABLED', language: 'c')
endif
add_global_arguments('-Werror=incompatible-pointer-types', '-Werror=switch', language: 'c')
add_global_arguments('-fcommon', language: 'c')		# TODO: Fix this
include = [ include_directories('./include/') ]


utils_lib = shared_library('scc-utils',
	include_directories: include,
	dependencies: [ meson.get_compiler('c').find_library('m'), libexecinfo ],
	sources: [
		'src/utils/strbuilder.c',
		'src/utils/traceback.c',
		'src/utils/tokenizer.c',
		'src/utils/argparse.c',
		'src/utils/logging.c',
		'src/utils/hashmap.c',
		'src/utils/intmap.c',
		'src/utils/aojls.c',
		'src/utils/list.c',
		'src/utils/math.c',
	],
)


conversions_lib = shared_library('scc-conversions',
	include_directories: include,
	link_with: [utils_lib],
	sources: [
		'src/conversions/string_constants.c',
		'src/conversions/int_constants.c',
		'src/conversions/generated.c',
		'src/conversions/methods.c',
	]
)

# Difference between tools and utils:
#  - utils are universal stuff taken from other project (such as hashmap)
#  - tools are scc-specific functions used on many places (such as find_profile)
tools_lib = shared_library('scc-tools',
	dependencies: tools_library_deps,
	include_directories: include,
	link_with: [utils_lib],
	sources: [
		'src/tools/load_library.c',
		'src/tools/constants.c',
		'src/tools/userdata.c',
		'src/tools/paths.c',
	]
)

config_lib = shared_library('scc-config',
	link_with: [ utils_lib, tools_lib ],
	include_directories: include,
	sources: [
		'src/config/defaults.c',
		'src/config/common.c',
		'src/config/' + CONFIG_BACKEND + '.c',
	],
)

params_lib = static_library('params',
	link_with: [utils_lib],
	include_directories: include,
	sources: run_command('find', 'src/actions/parameter',
			'-maxdepth', '1', '-name', C_FILES).stdout().strip().split('\n')
)

param_checker_lib = static_library('param_checker',
	link_with: [utils_lib],
	include_directories: include,
	sources: run_command('find', 'src/actions/param_checker',
			'-maxdepth', '1', '-name', C_FILES).stdout().strip().split('\n')
)

action_files = (run_command('find', 'src/actions/',
			'-name', C_FILES).stdout().strip().split('\n'))
actions_lib = shared_library('scc-actions',
	link_with: [ utils_lib, tools_lib, params_lib, param_checker_lib,
					conversions_lib ],
	include_directories: include,
	dependencies: [ meson.get_compiler('c').find_library('m') ],
	sources: action_files + [
		custom_target('actions_lib_autogenerated_initializers',
			input: 'src/actions/generate_initializers.sh',
			depend_files: [ 'src/actions/generate_initializers.sh' ] + action_files,
			command: ['bash', '@INPUT@'] + action_files,
			output: 'action_initializers.inc',
			build_by_default: true,
			capture: true,
		)
	]
)

parser_lib = shared_library('scc-parser',
	include_directories: include,
	dependencies: parser_lib_deps,
	link_with: [ utils_lib, tools_lib, actions_lib, params_lib, conversions_lib ],
	sources: [
		'src/parser/action_parser.c',
		'src/parser/param_parser.c',
		'src/parser/jsonprofile.c',
		'src/parser/menu_data.c',
		'src/parser/regexes.c',
	]
)

bindings_lib = shared_library('scc-bindings',
	include_directories: include,
	link_with: [ actions_lib, params_lib, parser_lib ],
	#TODO: Canno tuse link_with: conversions_lib on Windows, symbols are not exported
	c_args: [ '-Wl,--export-all-symbols ' ],
	sources: [
		'src/conversions/string_constants.c',
		'src/conversions/int_constants.c',
		'src/conversions/generated.c',
		'src/actions/parameter/tuple.c',
		'src/tools/constants.c',
		'src/tools/bindings.c',
		'src/tools/paths.c',
	]
)


run_target_env = environment()
run_target_env.set('SCC_SHARED', meson.source_root())
run_target_env.set('SCC_DRIVERS', meson.build_root() / 'src' / 'daemon' / 'drivers')
run_target_env.append('PATH', meson.build_root())
run_target_env.append('PATH', meson.build_root() / 'src' / 'client')
run_target_env.append('PATH', meson.build_root() / 'src' / 'osd' / 'common')
run_target_env.append('PATH', meson.build_root() / 'src' / 'osd' / 'menus')
run_target_env.append('PATH', meson.build_root() / 'src' / 'osd' / 'keyboard')
run_target_env.append('PATH', meson.build_root() / 'src' / 'virtual-device')
run_target_env.append('LD_LIBRARY_PATH', meson.build_root())


subdir('src/virtual-device')
subdir('src/client')
subdir('src/daemon/drivers')
subdir('src/daemon')
if get_option('android').disabled() and host_machine.system() != 'openbsd' and host_machine.system() != 'netbsd'
	subdir('src/osd')
endif
if get_option('menu-generators').enabled()
	subdir('src/menu-generators')
endif
subdir('src/gui')
subdir('tests')

